-- Create the database
CREATE DATABASE BankDB;
USE BankDB;

-- Create Bank table
CREATE TABLE Bank_227_230 (
    Code INT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Address VARCHAR(255)
);

-- Create Branch table
CREATE TABLE Branch_227_230 (
    BranchID INT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Code INT,
    FOREIGN KEY (Code) REFERENCES Bank_227_230(Code)
);

-- Create Staff table
CREATE TABLE Staff_227_230 (
    StaffID INT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Role VARCHAR(50),
    Email VARCHAR(100) UNIQUE,
    Contact VARCHAR(15),
    Password VARCHAR(255) NOT NULL,
    BranchID INT,
    FOREIGN KEY (BranchID) REFERENCES Branch_227_230(BranchID)
);


-- Create Customers table
CREATE TABLE Customers_227_230 (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE,
    Contact VARCHAR(15),
    Address TEXT,
    DOB DATE,
    BranchID INT,  -- Foreign key reference
    FOREIGN KEY (BranchID) REFERENCES Branch_227_230(BranchID)
);


-- Create Accounts table
CREATE TABLE Accounts_227_230 (
    AccountID INT PRIMARY KEY,
    AccountType VARCHAR(50) NOT NULL,
    Balance DECIMAL(10,2) NOT NULL DEFAULT 0.00,
    CustomerID INT,  -- Foreign key reference
    OpenedDate DATE NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Customers_227_230(CustomerID)
);


-- Create Transactions table
CREATE TABLE Transactions_227_230 (
    TransactionID INT PRIMARY KEY,
    AccountID INT,  -- Foreign key reference
    StaffID INT,  -- Foreign key reference
    Amount DECIMAL(10,2) NOT NULL,
    TransactionDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    TransactionType VARCHAR(50) NOT NULL,
    FOREIGN KEY (AccountID) REFERENCES Accounts_227_230(AccountID),
    FOREIGN KEY (StaffID) REFERENCES Staff_227_230(StaffID)
);


-- Create Loans table
CREATE TABLE Loans_227_230 (
    LoanID INT PRIMARY KEY,
    LoanType VARCHAR(50) NOT NULL,
    Amount DECIMAL(10,2) NOT NULL,
    StaffID INT,  -- Foreign key reference
    CustomerID INT,  -- Foreign key reference
    FOREIGN KEY (StaffID) REFERENCES Staff_227_230(StaffID),
    FOREIGN KEY (CustomerID) REFERENCES Customers_227_230(CustomerID)
);

-- Create the trigger to prevent withdrawal beyond available balance
DELIMITER $$

CREATE TRIGGER check_balance_before_transaction
BEFORE INSERT ON Transactions_227_230
FOR EACH ROW
BEGIN
    DECLARE balance DECIMAL(10,2);
    
    -- Fetch the current balance of the account involved in the transaction
    SELECT Balance INTO balance
    FROM Accounts_227_230
    WHERE AccountID = NEW.AccountID;
    
    -- Check if the transaction is a withdrawal and the balance is insufficient
    IF NEW.TransactionType = 'Withdraw' AND balance < NEW.Amount THEN
        -- Raise an error if funds are insufficient
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Insufficient funds';
    END IF;
END $$

DELIMITER ;


