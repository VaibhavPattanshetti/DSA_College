#include <iostream>
using namespace std;
class node{
    string addr;
    public:
    node *next;
    node(){
        next = nullptr;
    }
    void read(){
        cout<<"Enter address: ";
        cin>>addr;
    }
    void display(){
        cout<<"address: "<<addr<<endl;
    }
};

class browseHistoryStack{
    node *top;
    public:
    browseHistoryStack(){
        top=nullptr;
    }
    ~browseHistoryStack(){
        while(top!=nullptr){
            node *temp = top;
            top = top->next;
            delete temp;
        }
    }
    bool isEmpty(){
        return top==nullptr;
    }
    void PushPage(){
        node *nn = new node;
        nn->read();
        if(top==nullptr){
            top = nn;
        }else{
            nn->next = top;
            top = nn;
        }
    }
    void PopPage(){
        if(isEmpty()){
            cout<<"Stack is Empty!!"<<endl;
            return;
        }
        node *temp = top;
        top = top->next;
        delete temp;
    }
    void PeekPage(){
        if(top==nullptr){
            cout<<"Stack is Empty!!"<<endl;
        }else{
            top->display();
        }
    }
};

using namespace std;
int main() {
    bool check = true;
    int choice;
    browseHistoryStack obj;
    
    cout<<"1.Add visited page\n2.Navigate back\n3.View current page\n4.Check if history is empty or not\n5.Exit\n";
    
    while(check){
        cout<<"Enter choice :";
        cin>>choice;
        switch(choice){
            case 1:
                obj.PushPage();
                break;
            case 2:
                obj.PopPage();
                break;
            case 3:
                obj.PeekPage();
                break;
            case 4:
                if(obj.isEmpty()){
                    cout<<"History is empty"<<endl;
                }else{
                    cout<<"History is  not empty"<<endl;
                }
                break;
            case 5:
                check= false;
                break;
            default:
                cout<<"Enter valid Option!"<<endl;
                break;
        }
    }
    
    cout<<"Exiting....";

    return 0;
}
