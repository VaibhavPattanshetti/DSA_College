#include <iostream>
#include <climits> // Included for INT_MIN (not used in this code)
using namespace std;

// Employee class to store employee details
class employee {
    int id; // Employee ID
    string name; // Employee name
    int salary; // Employee salary

public:
    // Method to read employee data
    void readData() {
        cin >> name >> id >> salary; // Input name, id, and salary from user
    }

    // Method to display employee data
    void displayData() {
        cout << "Name: " << name << "\nID: " << id << "\nSalary: " << salary << "\n"; // Output employee details
    };

    // Friend function declarations for QuickSort
    friend void swap(employee& a, employee& b); // Swap two employee objects
    friend int partition(employee obj[], int low, int high); // Partition function for QuickSort
    friend void QuickSort(employee obj[], int low, int high); // QuickSort function
};

// Function to swap two employee objects
void swap(employee& a, employee& b) {
    employee temp = a; // Temporary variable to hold one employee
    a = b; // Assign second employee to first
    b = temp; // Assign temporary variable to second employee
}

// Function to partition the array of employees
int partition(employee obj[], int low, int high) {
    employee pivot = obj[low]; // Choose the first element as the pivot
    int i = low + 1; // Pointer for the next element on the left side
    int j = high; // Pointer for the next element on the right side

    while (true) {
        // Move the left pointer until an element greater than the pivot is found
        while (i <= j && obj[i].id <= pivot.id) {
            i++;
        }
        // Move the right pointer until an element less than or equal to the pivot is found
        while (i <= j && obj[j].id > pivot.id) {
            j--;
        }
        // If the pointers have crossed, break out of the loop
        if (i >= j) {
            break;
        }
        swap(obj[i], obj[j]); // Swap the elements at the left and right pointers
    }
    swap(obj[low], obj[j]); // Place the pivot in the correct position
    return j; // Return the index of the pivot
}

// QuickSort function to sort the array of employees
void QuickSort(employee obj[], int low, int high) {
    if (low < high) { // Base case for recursion
        int p = partition(obj, low, high); // Partition the array and get the pivot index

        // Recursively apply QuickSort on the left and right subarrays
        QuickSort(obj, low, p - 1);
        QuickSort(obj, p + 1, high);
    }
}

// Main function to execute the program
int main() {
    int n; // Number of employees
    cout << "Enter number of employees : ";
    cin >> n; // Input number of employees
    employee obj[n]; // Create an array of employee objects

    cout << "Enter Your Data\n";
    for (int i = 0; i < n; i++) {
        obj[i].readData(); // Read data for each employee
    }

    QuickSort(obj, 0, n - 1); // Sort the array of employees using QuickSort

    cout << "----------------------------------------------------------------\n";
    cout << "Sorted Data\n";
    for (int i = 0; i < n; i++) {
        obj[i].displayData(); // Display sorted employee data
    }

    return 0; // End of program
}
