//Time Complexity: O(n+k) where k is the range of the input
//*note -- counting sort is only for single digit numbers

#include <iostream>
#include <vector>

void countingSort(std::vector<int>& arr) {
    // Find the maximum element to determine the range of the count array
    int maxValue = *max_element(arr.begin(), arr.end());

    // Create a count array with size maxValue+1, initialized to 0
    std::vector<int> count(maxValue + 1, 0);

    // Store the count of each element
    for (int num : arr) {
        count[num]++;
    }

    // Modify the count array to store the cumulative count
    for (int i = 1; i <= maxValue; ++i) {
        count[i] += count[i - 1];
    }

    // Create an output array to store the sorted elements
    std::vector<int> output(arr.size());

    // Place elements into the output array based on their cumulative counts
    // Iterate in reverse to maintain stability
    for (int i = arr.size() - 1; i >= 0; --i) {
        output[count[arr[i]] - 1] = arr[i];
        count[arr[i]]--;
    }

    // Copy the sorted elements back to the original array
    arr = output;
}

int main() {
    std::vector<int> arr = {4, 2, 2, 8, 3, 3, 1};

    std::cout << "Original array: ";
    for (int num : arr) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    countingSort(arr);

    std::cout << "Sorted array: ";
    for (int num : arr) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}
